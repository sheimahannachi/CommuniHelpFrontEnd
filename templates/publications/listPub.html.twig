{% extends 'base.html.twig' %}
{% block orangeblkocs %}
{% endblock %}
{% block whiteblocs %}
{% endblock %}
{% block causes %}
{% endblock %}
{% block donations %}
{% endblock %}
{% block pictures %}
{% endblock %}
{% block events %}
{% endblock %}
{% block volunteer %}
{% endblock %}


{% block blog %}
<section class="ftco-section">
    <div class="container">
        <div class="row justify-content-center mb-5 pb-3">
            <div class="col-md-7 heading-section ftco-animate text-center">
                
            </div>
        </div>
        <div class="row d-flex">
        {% for pub in publications %}
            <div class="col-md-4 d-flex ftco-animate">
                <div class="blog-entry align-self-stretch">
                    <a href="{{ path('list_publications', {'id': pub.id}) }}" class="block-20" style="background-image: url('{{ asset('images_pub/' ~ pub.imagePath) }}'); background-size: cover; background-position: center; height: 200px; width: 100%;"></a>
                    <div class="text p-4 d-block">
                        <div class="meta mb-3">
                            <div><a href="#"><p class="time-loc"><span class="mr-2"><i class="icon-clock-o"></i>{{ pub.dateDePublication | date }}</span></a></p></div>
                            <div><a href="#">{{ pub.tags }}</a></div>
                        </div>
                        <h3 id="pubText_{{ pub.id }}"class="heading mt-3 text-truncate"><a href="{{ path('list_publications', {'id': pub.id}) }}">{{ pub.texte }}</a></h3>

                        <!-- Like icon -->
                        <span class="like-icon" data-pub-id="{{ pub.id }}" onclick="toggleLike(this)">
                            {% if pub.id in app.session.get('liked_publications', []) %}
                                <img src="{{ asset('images_pub/red_heart.png') }}" alt="Liked" class="icon-image" style="width: 70%; height: 90px;" /> 
                            {% else %}
                                <img src="{{ asset('images_pub/heart.png') }}" alt="Like" class="icon-image" style="width: 15%; height: 30px;" /> 
                            {% endif %}
                        </span>

                        <!-- Comment icon -->
                       <span class="comment-icon" data-pub-id="{{ pub.id }}" onclick="openCommentDialog('{{ pub.id }}', '{{ pub.idMed  }}')">
                      <img src="{{ asset('images_pub/comment.png') }}" alt="Comment" class="icon-image" style="width: 24%; height: 60px;" />
                      </span>
                      <!-- Translate button -->
                     <button id="translateButton" onclick="translatePublication('{{ pub.texte }}', '{{ pub.id }}')">Traduire</button>
                     
<a href="{{ path('show_pub', {'id': pub.id}) }}" class="image" style="background-image: url('{{ asset('images_pub/details.png') }}'); background-size: cover; background-position: center; height: 80px; width: 30%;"></a>
                    </div>
                </div>
            </div>
            
        {% endfor %}
        </div>
    </div>
    
</section>

 <!-- Chatbot Section -->
    <section class="chatbot-section">
        <img src="{{ asset('images_pub/chatbot.png') }}" alt="Chatbot" id="chatbotImage"style="width: 150px; height: 150px;" onclick="openChatModal()">
    </section>

    <!-- Chat Modal -->
    <div id="chatModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeChatModal()">&times;</span>
            <h2>Chat with Chatbot</h2>
            <textarea id="chatInput" placeholder="Ask a question"></textarea>
            <button onclick="sendMessageToChatbot()">Send</button>
            <div id="chatOutput"></div>
        </div>
    </div>



  <div id="commentModal" class="modal">
        <!-- Modal content -->
        <div class="modal-content">
            <span class="close" onclick="closeCommentDialog()">&times;</span>
            <h2>Commentaires</h2>
            
            <form id="commentForm">
    <textarea id="commentText" placeholder="Write a comment"></textarea>
    
    <button type="button" class="add-comment">ajouter</button>
<button type="button" class="edit-comment">Modifier</button>
<button type="button" class="delete-comment">Supprimer</button>


<div id="commentListContainer"></div>
<ul id="commentList"></ul>
</form>
        </div>
    </div>

    <style>


    #translateButton {
    background-color: #808000; /* Green background */
    color: white; /* White text color */
    border: none; /* Remove border */
    padding: 6px 6px; /* Add padding */
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 2px 2px;
    cursor: pointer;
    border-radius: 6px; /* Optional: Add rounded corners */
}

#translateButton:hover {
    background-color: #CD853F; 
}

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 30%;
            top: 20%;
            width: 40%;
            height: 70%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0);
        }

        .modal-content {
            background-color: #FF8C00;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }

        .close {
            color: #FFFFFF;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #FFFFFF;
            text-decoration: none;
            cursor: pointer;
        }

        #commentText {
            width: 100%;
            height: 100px;
        }

        #commentList li {
    color: #FFFFFF; /* Change the text color as needed */
    margin-bottom: 10px;
        }


    .add-comment,
    .edit-comment,
    .delete-comment {
        background-color: #D2B48C;
        color: white; /* White text color */
        border: none; /* Remove border */
        padding: 10px 20px; /* Add padding */
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 4px; /* Optional: Add rounded corners */
    }

    .add-comment:hover,
    .edit-comment:hover,
    .delete-comment:hover {
        background-color: #F5DEB3; /* Darker green on hover */
    }

    .chatbot-section {
    text-align: right;
    margin-top: 2px;
    margin-right: 40px;
}

#chatbotImage {
    cursor: pointer;
    margin-top: -100px;
}

/* Add styles for chat modal */
#chatModal {
    display: none;
    position: fixed;
    right: -300px;
}

#chatModal .modal-content {
    background-color: #FF8C00;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
   
}

#chatModal textarea {
    width: 100%;
    height: 100px;
    margin-bottom: 10px;
}

#chatModal button {
    background-color: #D2B48C;
    color: white;
    border: none;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 4px;
}

#chatModal button:hover {
    background-color: #F5DEB3;
}

#chatModal #chatOutput {
    margin-top: 10px;
    color: #000000;
}
.image {
            float: right; /* Déplace l'image à droite */
            margin-top: -60px;

}
    </style>





<script>







   function toggleLike(likeIcon) {
    var pubId = likeIcon.getAttribute('data-pub-id');
    
    // Check if the publication is already liked
    var isLiked = likeIcon.classList.contains('liked');

    // Update the like status
    if (isLiked) {
        // Decrement the likes in the database
        updateLikesOnServer(pubId, 'decrement');
    } else {
        // Increment the likes in the database
        updateLikesOnServer(pubId, 'increment');
    }

    // Update the visual appearance of the icon based on the like status
    var likeImage = likeIcon.querySelector('img');
    if (isLiked) {
        likeIcon.classList.remove('liked');
        likeImage.src = "{{ asset('images_pub/heart.png') }}"
        likeImage.style.width = "15%";
        likeImage.style.height = "30px";
       
        // Decrement the displayed likes
        likeIcon.querySelector('span').innerText = parseInt(likeIcon.querySelector('span').innerText) - 1 + " Like";
    } else {
        likeIcon.classList.add('liked');
        likeImage.src = "{{ asset('images_pub/red_heart.png') }}";
        likeImage.style.width = "25%";
        likeImage.style.height = "54px";
    
        // Increment the displayed likes
        likeIcon.querySelector('span').innerText = parseInt(likeIcon.querySelector('span').innerText) + 1 + " Like";
    }
}

function updateLikesOnServer(pubId, action) {
    // Make an AJAX request to update the like status on the server
    fetch(/like-toggle/${pubId}, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            isLiked: action === 'increment', // Sending true for increment, false for decrement
        }),
    })
    .then(response => response.json())
    .then(data => {
        // Handle the response if needed
        console.log('Server response:', data);
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

  function openCommentDialog(pubId, currentUserId) {
    currentPublicationId = pubId;

    // Fetch existing comments from the server and update the comment list
    fetchCommentsFromServer(pubId, currentUserId)
        .then(() => {
            // Display the modal
            document.getElementById('commentModal').style.display = 'block';
        })
        .catch(error => {
            console.error('Error fetching comments:', error);
        });
}

function fetchCommentsFromServer(pubId, currentUserId) {
    return new Promise((resolve, reject) => {
        fetch(/api/comments/${pubId})
            .then(response => response.json())
            .then(data => {
                var commentList = document.getElementById('commentList');
                commentList.innerHTML = '';
               
                data.forEach(function (comment) {
    var listItem = document.createElement('li');
    listItem.innerHTML = comment.content; // Change to 'content'
    listItem.setAttribute('data-comment-id', comment.id);

    // Attach a click event listener to the comment element
    listItem.addEventListener('click', function () {
        selectComment(comment.id);
    });

    commentList.appendChild(listItem);
});

                resolve(); // Resolve the promise after comments are fetched
            })
            .catch(error => {
                reject(error); // Reject the promise if there's an error
            });
    });
}

var badWords = ["sheima", "oumayma", "hazem","nadhir"];
function submitComment(medecinId, pubId, commentText) {

    var censoredText = censorBadWords(commentText);
    fetch(/commentaire/add/${pubId}, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
            'commentText': censoredText,
        }),
    })
    .then(response => response.json())
    .then(data => {
        // Handle the response from the server
        console.log(data);

        // Add the new comment to the comment list with the correct data-comment-id attribute
        var commentList = document.getElementById('commentList');
        var newComment = document.createElement('li');
        newComment.textContent = data.contenucommentaire;
        newComment.setAttribute('data-comment-id', data.id); // Set the comment ID as a data attribute
        commentList.appendChild(newComment);

        // Clear the comment text area
        document.getElementById('commentText').value = '';
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function censorBadWords(text) {
    // Convert text to lowercase for case-insensitive comparison
    var lowerText = text.toLowerCase();

    // Replace each occurrence of bad words with asterisks
    badWords.forEach(word => {
        var regex = new RegExp(word, 'gi'); // 'gi' for global and case-insensitive
        text = text.replace(regex, '*'.repeat(word.length));
    });

    return text;
}

       
function selectComment(commentId) {
    selectedCommentId = commentId;

    // Highlight the selected comment visually
    var commentListItems = document.querySelectorAll('#commentList li');
    commentListItems.forEach(function (item) {
        var itemId = item.getAttribute('data-comment-id');
        item.style.backgroundColor = itemId === selectedCommentId ? '#ffcccb' : '';
    });

    // Fetch the selected comment text
    var selectedComment = document.querySelector(#commentList li[data-comment-id="${selectedCommentId}"]);
    var selectedCommentText = selectedComment ? selectedComment.textContent : '';

    // Populate the comment text field in the dialog with the selected comment text
    document.getElementById('commentText').value = selectedCommentText;
}

function editSelectedComment() {
    if (selectedCommentId) {
        var newText = document.getElementById('commentText').value;
        editComment(selectedCommentId, newText);
    } else {
        console.error('No comment selected for editing.');
    }
}

function editComment(commentId, newText) {
    fetch(/commentaire/edit/${commentId}, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
            'newText': newText,
        }),
    })
    .then(response => response.json())
    .then(data => {
        // Handle the response from the server
        console.log(data);

        // Find and update the modified comment in the comment list
        var commentList = document.getElementById('commentList');
        var commentListItem = commentList.querySelector(li[data-comment-id="${commentId}"]);
        commentListItem.textContent = newText;
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function deleteSelectedComment() {
    if (selectedCommentId) {
        if (confirm('Are you sure you want to delete this comment?')) {
            deleteComment(selectedCommentId);
        }
    } else {
        console.error('No comment selected for deletion.');
    }
}

function deleteComment(commentId) {
    fetch(/commentaire/delete/${commentId}, {
        method: 'DELETE',
    })
    .then(response => response.json())
    .then(data => {
        // Handle the response from the server
        console.log(data);

        // Remove the deleted comment from the comment list
        var commentList = document.getElementById('commentList');
        var commentListItem = commentList.querySelector(li[data-comment-id="${commentId}"]);
        commentListItem.remove();
        document.getElementById('commentText').value = '';
    })
    .catch(error => {
        console.error('Error:', error);
    });
}
// Function to close the comment dialog
        function closeCommentDialog() {
        document.getElementById('commentModal').style.display = 'none';
        } 
document.addEventListener('DOMContentLoaded', function() {
    // Event listener for the buttons
    document.getElementById('commentForm').addEventListener('click', function(event) {
        var target = event.target;

        // Check if the clicked element is a button
        if (target.tagName === 'BUTTON') {
            // Check the class of the button and call the corresponding function
            if (target.classList.contains('add-comment')) {
                submitComment('1', currentPublicationId, document.getElementById('commentText').value);
            } else if (target.classList.contains('edit-comment')) {
                editSelectedComment();
            } else if (target.classList.contains('delete-comment')) {
                if (confirm('Are you sure you want to delete this comment?')) {
                    deleteSelectedComment();
                }
            }
        }
    });
});



      // Chatbot functions
        function openChatModal() {
            document.getElementById('chatModal').style.display = 'block';
        }

        function closeChatModal() {
            document.getElementById('chatModal').style.display = 'none';
        }

        async function sendMessageToChatbot() {
            const chatInput = document.getElementById('chatInput').value;
            const chatOutput = document.getElementById('chatOutput');

            // Chatbot API endpoint and key
            const url = 'https://chatgpt-gpt4-ai-chatbot.p.rapidapi.com/ask';
            const apiKey = '020a985271msh63da4e188052ac8p1761aajsn6b9e047c9fb3';

            const options = {
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                    'X-RapidAPI-Key': apiKey,
                    'X-RapidAPI-Host': 'chatgpt-gpt4-ai-chatbot.p.rapidapi.com'
                },
                body: JSON.stringify({
                    query: chatInput
                })
            };

            try {
                const response = await fetch(url, options);
                const result = await response.text();

                // Display the chatbot's response in the modal
                chatOutput.innerHTML += <div>You: ${chatInput}</div>;
                chatOutput.innerHTML += <div>Chatbot: ${result}</div>;

                // Clear the input field
                document.getElementById('chatInput').value = '';
            } catch (error) {
                console.error(error);
            }
        }






   async function translatePublication(text, publicationId) {
    const url = 'https://google-translate1.p.rapidapi.com/language/translate/v2';
    const apiKey = '020a985271msh63da4e188052ac8p1761aajsn6b9e047c9fb3';

    const options = {
        method: 'POST',
        headers: {
            'content-type': 'application/x-www-form-urlencoded',
            'Accept-Encoding': 'application/gzip',
            'X-RapidAPI-Key': apiKey,
            'X-RapidAPI-Host': 'google-translate1.p.rapidapi.com'
        },
        body: new URLSearchParams({
            q: text,
            target: 'en',
            source: 'fr'
        })
    };

    try {
        const response = await fetch(url, options);
        const result = await response.json();

        // Extract the translated text from the response
        const translatedText = result.data.translations[0].translatedText;

        // Update the translated text in the publication
        const publicationTextElement = document.getElementById(pubText_${publicationId});
        if (publicationTextElement) {
            publicationTextElement.textContent = translatedText;
        }
    } catch (error) {
        console.error(error);
    }
}





</script>


{% endblock %}